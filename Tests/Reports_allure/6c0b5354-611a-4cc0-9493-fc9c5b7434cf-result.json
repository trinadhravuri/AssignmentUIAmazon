{"name": "test_creating_wishlist", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=116.0.5845.111)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63C0952A2+57122]\n\t(No symbol) [0x00007FF63C00EA92]\n\t(No symbol) [0x00007FF63BEDE25D]\n\t(No symbol) [0x00007FF63BF18E97]\n\t(No symbol) [0x00007FF63BF0F25F]\n\t(No symbol) [0x00007FF63BF36FDA]\n\t(No symbol) [0x00007FF63BF0EB76]\n\t(No symbol) [0x00007FF63BF371F0]\n\t(No symbol) [0x00007FF63BF4EB82]\n\t(No symbol) [0x00007FF63BF36DB3]\n\t(No symbol) [0x00007FF63BF0D2B1]\n\t(No symbol) [0x00007FF63BF0E494]\n\tGetHandleVerifier [0x00007FF63C33EF82+2849794]\n\tGetHandleVerifier [0x00007FF63C391D24+3189156]\n\tGetHandleVerifier [0x00007FF63C38ACAF+3160367]\n\tGetHandleVerifier [0x00007FF63C126D06+653702]\n\t(No symbol) [0x00007FF63C01A208]\n\t(No symbol) [0x00007FF63C0162C4]\n\t(No symbol) [0x00007FF63C0163F6]\n\t(No symbol) [0x00007FF63C0067A3]\n\tBaseThreadInitThunk [0x00007FFB91767614+20]\n\tRtlUserThreadStart [0x00007FFB91BE26B1+33]", "trace": "self = <test_UI.TestUI object at 0x000002293ED9E0D0>\n\n    def test_creating_wishlist(self):\n        self.driver.execute_script(\"window.scrollTo(0,0)\")\n        actions = ActionChains(self.driver)\n        ele = self.driver.find_element(By.XPATH,read_conf('locators','amazon_sign'))\n        actions.move_to_element(ele).click()\n>       self.driver.find_element(By.XPATH,read_conf('locators','wish_list')).click()\n\ntest_UI.py:102: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:345: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002293ED57E90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF63C0067A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB91767614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFB91BE26B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=116.0.5845.111)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63C0952A2+57122]\nE       \t(No symbol) [0x00007FF63C00EA92]\nE       \t(No symbol) [0x00007FF63BEDE25D]\nE       \t(No symbol) [0x00007FF63BF18E97]\nE       \t(No symbol) [0x00007FF63BF0F25F]\nE       \t(No symbol) [0x00007FF63BF36FDA]\nE       \t(No symbol) [0x00007FF63BF0EB76]\nE       \t(No symbol) [0x00007FF63BF371F0]\nE       \t(No symbol) [0x00007FF63BF4EB82]\nE       \t(No symbol) [0x00007FF63BF36DB3]\nE       \t(No symbol) [0x00007FF63BF0D2B1]\nE       \t(No symbol) [0x00007FF63BF0E494]\nE       \tGetHandleVerifier [0x00007FF63C33EF82+2849794]\nE       \tGetHandleVerifier [0x00007FF63C391D24+3189156]\nE       \tGetHandleVerifier [0x00007FF63C38ACAF+3160367]\nE       \tGetHandleVerifier [0x00007FF63C126D06+653702]\nE       \t(No symbol) [0x00007FF63C01A208]\nE       \t(No symbol) [0x00007FF63C0162C4]\nE       \t(No symbol) [0x00007FF63C0163F6]\nE       \t(No symbol) [0x00007FF63C0067A3]\nE       \tBaseThreadInitThunk [0x00007FFB91767614+20]\nE       \tRtlUserThreadStart [0x00007FFB91BE26B1+33]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "start": 1692952533734, "stop": 1692952536829, "uuid": "0ebfa06c-640c-4bf2-8122-6dfc11679d25", "historyId": "49d481b0dc6fa86dd4618f928261385c", "testCaseId": "49d481b0dc6fa86dd4618f928261385c", "fullName": "test_UI.TestUI#test_creating_wishlist", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('invoke_browser')"}, {"name": "suite", "value": "test_UI"}, {"name": "subSuite", "value": "TestUI"}, {"name": "host", "value": "Trinadh"}, {"name": "thread", "value": "22928-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_UI"}]}